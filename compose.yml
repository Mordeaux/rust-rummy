version: "3.9"
services:

  db:
    image: postgres:15-alpine
    restart: always
    environment:
      - POSTGRES_PASSWORD=mysecretpassword
    networks:
      - server-side
    ports:
      - 5432:5432
    volumes:
      - db-data:/var/lib/postgresql/data
    stop_signal: SIGINT

  backend:
    build:
      context: .
      target: flask
    environment:
      - PG_DBNAME=postgres
      - PG_HOST=db
      - PG_USER=postgres
      - PG_PASSWORD=mysecretpassword
      - ADDRESS=0.0.0.0:8000
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./backend:/app
      - rust-python:/app/rust-python
      - virtualenv:/venv
    depends_on:
      - db
      - rust-python
    networks:
      - client-side
      - server-side
    stop_signal: SIGINT
    ports:
      - '5000:5000'
    command: poetry run flask --app=src --debug run --host=0.0.0.0

  frontend:
    build:
      context: frontend
      target: development
    ports:
      - 3000:3000
    volumes:
      - ./frontend:/app
      - rust-wasm:/app/src/rummy-wasm
      - node-modules:/app/node_modules
    depends_on:
      - db
      - rust-wasm
    networks:
      - client-side
    stop_signal: SIGINT
    command: yarn start

  rust-wasm:
    build:
      context: .
      target: rust_wasm
    volumes:
      - ./rust:/app
      - rust-wasm:/app/pkg
    stop_signal: SIGINT
    command: cargo watch -i 'pkg/*' -- wasm-pack build -- --features jsbindings

  rust-python:
    build:
      context: .
      target: rust_python
    volumes:
      - ./rust:/app
      - rust-python:/app/target/wheels
      - virtualenv:/venv
    stop_signal: SIGINT
    command: cargo watch -- maturin develop --features pybindings



networks:
  client-side: {}
  server-side: {}

volumes:
  db-data: {}
  rust-wasm: {}
  rust-python: {}
  node-modules: {}
  virtualenv: {}
